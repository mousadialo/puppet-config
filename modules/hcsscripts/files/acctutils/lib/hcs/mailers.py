# TODO: add logging
import logging, time
import smtplib, utils, os, re, sys
from email.MIMEText import MIMEText
from email.Utils import formatdate, make_msgid
import settings.mail, settings.log
logger = logging.getLogger('mailers')

class MailerMetaclass(type):
    """ Metaclass for mailer """
    def __getattr__(cls, attr):
        import re
        match = re.match('^(?:deliver|create)_(.*)', attr)
        if match:
            name = match.group(1)
            # Create the attribute so we don't have to do this
            # method_missing again
            create, deliver = cls._create_deliver_and_creation(name)
            setattr(cls, 'deliver_%s' % name, staticmethod(deliver))
            setattr(cls, 'create_%s' % name, staticmethod(create))
            return getattr(cls, attr)
        else:
            raise AttributeError, 'No attribute "%s" found' % attr

    def _create_deliver_and_creation(cls, name):
        """ Creates a deliver method """
        def build(*args, **kwargs):
            def extract_to(mailer, message):
                out = []
                for attr in ['to', 'cc', 'bcc']:
                    # Real recipient
                    real = '%s_real' % attr
                    try:
                        # If set to_real, then just grab those
                        addrs = getattr(mailer, real)
                    except AttributeError:
                        pass
                    else:
                        if addrs:
                            out += addrs
                            continue
                    try:
                        # Get all nontrivial email addrs
                        out += [i for i in message[attr].split(',') if i]
                    except AttributeError:
                        pass
                return [email.strip() for email in out]

            from Cheetah.Template import Template
            mailer = cls()
            m = getattr(mailer, name)
            if m:
                m(*args, **kwargs)
            else:
                raise AttributeError, 'No mailer attribute %s' % name
            text = str(Template(file=mailer.template(name), searchList=[mailer]))
            layout = mailer.layout(name)
            if layout:
                text = str(Template(file=layout, searchList=[{'yield':text}]))
            email = mailer.generate_email(text)
            send_from = email['from']
            send_to = extract_to(mailer, email)
            msg = email.as_string()
            mailer.msg = msg
            mailer.send_from = send_from
            mailer.send_to = send_to
            return mailer

        def create(*args, **kwargs):
            return build(*args, **kwargs)

        def deliver(*args, **kwargs):
            mailer = build(*args, **kwargs)
            server = smtplib.SMTP(settings.mail.host)
            server.set_debuglevel(0)
            logger.info("About to send message '%s' to %s (sending as %s)" % (mailer.subject, mailer.send_to, mailer.send_from))
            try: # Should I wait until it's successfully sent?
                noforce = mailer.noforce
            except AttributeError:
                noforce = False

            attempts = 0
            sent = False
            while not sent:
                try:
                    server.sendmail(mailer.send_from, mailer.send_to, mailer.msg)
                except Exception, e:
                    if noforce:
                        logger.error("FAILED: %s.\n" % e +
                                     "Attempted to sent an email from %s to %s." % (mailer.send_from, mailer.send_to) +
                                     " Message: \n" +
                                     mailer.msg)
                        break
                    else:
                        attempts += 1
                        logger.error("After %d attempt(s), could not send message: %s.  Sleeping for 0.2 seconds." % (attempts, e))
                        time.sleep(1)
                else:
                    sent = True
            server.quit()

        return create, deliver


class Mailer(object):
    """
    Generic mailer class.  The API is based off of Rails's
    ActiveMailer.  Call Mailer.deliver_method(args) to deliver the
    message generated by method(args)
    """

    __metaclass__ = MailerMetaclass
    templates_base = settings.mail.templates_base
    layouts_dir = settings.mail.layouts_dir
    template_name = 'acctserv'
    def __init__(self, wrap=False):
        self.settings = {'wrap':wrap}

    def getmsg(self):
        msg = self._msg
        if self.settings['wrap']:
            msg =  utils.word_wrap(msg)
        return msg

    def setmsg(self, msg):
        self._msg = msg
    msg = property(getmsg, setmsg)

    def _sendemail(self, sender, recipient, subject, text):
        try:
            server = smtplib.SMTP(settings.mail.host)
            server.set_debuglevel(1)
            server.sendmail(sender, recipient,  msg.as_string())
            server.quit()
        except:
            raise

    def __getattr__(self, attr, *args):
        import re
        match = re.search('deliver_(.*)', attr)
        if match:
            email = self.__dict__[match.group(1)](*args)

    def template_dir(self):
        return utils.camelcase_to_underscore(self.__class__.__name__)

    def template(self, name):
        return os.path.join(self.templates_base, self.template_dir(), '%s.tmpl' % name)

    def layout(self, name):
        return os.path.join(self.layouts_dir, '%s.tmpl' % self.template_name)

    def generate_email(self, text):
        def commatize(item):
            if isinstance(item, str):
                item = [item]
            try:
                item = [email.lower() for email in item]
                return ', '.join(item)
            except TypeError:
                return None

        send_to = commatize(self.send_to)
        cc = commatize(self.cc)

        msg = MIMEText(text)
        msg['Subject'] = self.subject
        msg['From'] = self.send_from
        msg['To'] = send_to
        msg['CC'] = cc
        msg['Date'] = formatdate(localtime=True)
        msg['Message-ID'] = make_msgid()
        return msg
